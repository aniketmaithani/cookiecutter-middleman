/* =============================================================================
   Mixins
   ========================================================================== */

/* ==|== Mixin =================
   General
====================================== */
@mixin circle ($size, $color: inherit ) {
  border-radius: 50%;
  display: inline-block;

  @if $color == inherit {
    // If user wants to inherit the color,
    // take advantage of the fact that border
    // color defaults to the text color of the element.
    border-width: $size / 2;
    border-style: solid;
    height: 0;
    width: 0;
  }
  @else {
    // Otherwise, just use background-color.
    background-color: $color;
    height: $size;
    width: $size;
  }
}

/* =========================================================================
   Layout
========================================================================== */

@mixin absolute-cover {
    bottom:0;
    height:100%;
    left:0;
    position: absolute;
    right:0;
    top:0;
    width:100%;
}

@mixin responsive-img(){
    > div {
        position: relative;
    }
    img {
        @include absolute-cover();
    }
}

@mixin cf() {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
    *zoom: 1;
}
@mixin color-fill($color) {
    color:$color;
    fill:$color;
}
@mixin border-color-fill($color) {
    border-color:$color;
    color:$color;
    fill:$color;
}

@mixin display-inline-block() {
    display:inline-block;
    *display:inline;
    *zoom:1;
}

@mixin center-block ($max-width: false) {
  margin-left: auto;
  margin-right: auto;
  @if $max-width {
    max-width: $max-width;
  }
}

@mixin list-unstyled {
    list-style-type: none;
    padding-left: 0;
}

@mixin list-inline ($space: false) {
  @include list-unstyled;

  & > li {
    display: inline-block;
  }

  @if $space {
    & > li + li {
      margin-left: $space;
    }
  }
}

@mixin fixed-cover {
    bottom:0;
    height:100%;
    left:0;
    position: fixed;
    right:0;
    top:0;
    width:100%;
}

/* =============================================================================
   Typography
========================================================================== */

@mixin link-border-bottom ($color: inherit, $style: solid, $width: 1px ) {
  text-decoration: none;

  border-bottom-width: $width;
  border-bottom-style: $style;
  @if $color != inherit {
    border-bottom-color: $color;
  }
}

@mixin font-size($value, $base: $size-base) {
    $rem: $value/$base;
    font-size:$value + px;
    font-size:$rem + rem;
}

@mixin font-smoothing($value) {
    font-smoothing:$value;
    -webkit-font-smoothing:$value;
}

@mixin font-face ($font-family, $file-path, $weight: normal, $style: normal ) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    src: url('#{$file-path}.eot');
    src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
         url('#{$file-path}.woff') format('woff'),
         url('#{$file-path}.ttf') format('truetype'),
         url('#{$file-path}.svg##{$font-family}') format('svg');
  }
}

@mixin hide-text() {
    overflow: hidden;
    text-indent:100%;
    white-space:nowrap;
}

/* =========================================================================
   Animations
========================================================================== */
/**
 * Changed this mixin so we can cache the bezier curves
 * as variables.
**/
@mixin cubic-bezier($bezier, $time:500ms, $property: all) {
    -webkit-transition: $property $time cubic-bezier($bezier);
       -moz-transition: $property $time cubic-bezier($bezier);
        -ms-transition: $property $time cubic-bezier($bezier);
         -o-transition: $property $time cubic-bezier($bezier);
            transition: $property $time cubic-bezier($bezier);
}

@mixin animation-name($name) {
    -webkit-animation-name: $name;
    -moz-animation-name: $name;
    -ms-animation-name: $name;
    -o-animation-name: $name;
    animation-name: $name;
}

@mixin animation-duration($time) {
    -webkit-animation-duration: $time;
    -moz-animation-duration: $time;
    -ms-animation-duration: $time;
    -o-animation-duration: $time;
    animation-duration: $time;
}
@mixin animation-iteration-count($count) {
    -webkit-animation-iteration-count: $count;
    -moz-animation-iteration-count: $count;
    -ms-animation-iteration-count: $count;
    -o-animation-iteration-count: $count;
    animation-iteration-count: $count;
}
@mixin animation-timing-function($funk) {
    -webkit-animation-timing-function: $funk;
    -moz-animation-timing-function: $funk;
    -ms-animation-timing-function: $funk;
    -o-animation-timing-function: $funk;
    animation-timing-function: $funk;
}
@mixin animation-delay($delay) {
    -webkit-animation-delay: $delay;
    -moz-animation-delay: $delay;
    -ms-animation-delay: $delay;
    -o-animation-delay:$delay;
    animation-delay:$delay;
}

@mixin animation($name, $time, $count, $easing, $delay, $fill_mode) {
    -webkit-animation: $name $time $easing $delay $count $fill_mode;
    -moz-animation: $name $time $easing $delay $count $fill_mode;
    -ms-animation: $name $time $easing $delay $count $fill_mode;
    -o-animation: $name $time $easing $delay $count $fill_mode;
    animation: $name $time $easing $delay $count $fill_mode;
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @-ms-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

@mixin trans($transition: all 0.2s ease) {
    -webkit-transition:$transition;
    -moz-transition:$transition;
    -o-transition:$transition;
    -ms-transition:$transition;
    transition:$transition;
}


@mixin mask-image($path) {
    -webkit-mask-image:url($path);
    -moz-mask-image:url($path);
    -ms-mask-image:url($path);
    -o-mask-image:url($path);
    mask-image:url($path);
}

@mixin not-touch() {
    @media not all and (orientation:landscape) and (orientation:portrait) {
        @content;
    }
}

@mixin rem($property, $value, $base: $size-base) {
    $rem: $value / $base;
    #{$property}: $value + px;
    #{$property}: $rem + rem;
}

@mixin respond-to($breakpoint, $unit: 'px') {
    @media only screen and (max-width:$breakpoint + $unit) {
        @content;
    }
}
@mixin respond-to-min($breakpoint, $unit: "px") {
    @media only screen and (min-width:$breakpoint + $unit) {
        @content;
    }
}
@mixin respond-to-height($breakpoint, $unit: 'px', $width: 'none') {
    @if $width == 'none' {
        @media only screen and (max-height:$breakpoint + $unit) {
            @content;
        }
    } @else {
        @media only screen and (max-height:$breakpoint + $unit) and (max-width: $width + $unit) {
            @content;
        }
    }
}

@mixin respond-to-min-height($breakpoint, $unit: 'px') {
    @media only screen and (min-height:$breakpoint + $unit) {
        @content;
    }
}

@mixin respond-to-min-max($min, $max, $unit: 'px') {
    @media only screen and (max-width:$max + $unit) and (min-width:$min + $unit) {
        @content;
    }
}

@mixin retina($touch: false) {
    @if $touch == true {
        @media (-webkit-min-device-pixel-ratio: 2) and (max-width:1024px), (min-resolution: 192dpi) and (max-width:1024px) {
            @content;
        }
    } @else {
        @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
            @content;
        }
    }
}

@mixin retina-not-iphone() {
    @media (-webkit-min-device-pixel-ratio: 2) and (min-width:768px) {
        @content;
    }
}

@mixin ipad($orientation: "both") {
    @if $orientation == 'both' {
        @media (orientation: portrait) and (max-height: 1280px) and (max-width: 800px),
                (orientation: landscape) and (max-width: 1280px) and (max-height: 800px) {
            @content;
        }
    } @else if $orientation == 'landscape' {
        @media (orientation: landscape) and (max-width: 1280px) and (max-height: 800px) {
            @content;
        }
    } @else if $orientation == 'portrait' {
        @media (orientation: portrait) and (max-height: 1280px) and (max-width: 800px) {
            @content;
        }
    }
}

@mixin orientation($o: 'portrait') {
    @media (orientation: $o) {
        @content;
    }
}

@mixin iphone($orientation: "both") {
    @if $orientation == 'both' {
        @media (orientation: portrait) and (max-height: 800px) and (max-width: 480px),
                (orientation: landscape) and (max-width: 800px) and (max-height: 480px) {
            @content;
        }
    } @else if $orientation == 'landscape' {
        @media (orientation: landscape) and (max-width: 800px) and (max-height: 480px) {
            @content;
        }
    } @else if $orientation == 'portrait' {
        @media (orientation: portrait) and (max-height: 800px) and (max-width: 480px) {
            @content;
        }
    } @else if $orientation == '4' {
        @media (orientation:portrait) and (max-height: 440px) and (max-width: 320px) {
            @content;
        }
    }
}

@mixin aspect-ratio($x, $y, $type: "max") {
    $query: '';
    @if $type == 'min' {
        $query: 'min-aspect-ratio';
    } @else {
        $query: 'max-aspect-ratio';
    }
    @media ($query: #{$x}/#{$y}) {
        @content;
    }
}
